---
const { skill, index, categoryColor } = Astro.props;
---

<div
  class="group relative opacity-0 scale-95 transition-all duration-500 skill-card"
  data-index={index}
  id={`skill-card-${index}`}
  tabindex="0"
  aria-label={`Skill: ${skill.name}, proficiency: ${skill.proficiency}%`}
>
  <div
    class="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-2xl blur-xl pointer-events-none"
  >
  </div>
  <div
    class="relative bg-gray-900/60 backdrop-blur-md rounded-xl xl:rounded-2xl p-3 xl:p-6 border border-gray-800 hover:border-gray-700 transition-all duration-300 hover:scale-105 shadow-xl"
  >
    <div class="flex flex-col items-center space-y-2 xl:space-y-4">
      <div class="relative w-14 h-14 xl:w-20 xl:h-20">
        <div
          class="absolute inset-0 bg-gradient-to-r from-white/10 to-white/0 rounded-xl opacity-30 animate-pulse"
        >
        </div>
        <img
          src={skill.icon.src ?? skill.icon}
          alt={skill.name}
          class="w-full h-full object-contain relative z-10 drop-shadow-lg"
          loading="lazy"
        />
      </div>
      <h3 class="text-white font-semibold text-lg text-center">{skill.name}</h3>
      <div
        class="w-full bg-gray-800/80 rounded-full h-2 overflow-hidden shadow-inner"
      >
        <div
          class={`h-full bg-gradient-to-r ${categoryColor} skill-progress`}
          data-progress={skill.proficiency}
          style="width: 0%"
        >
        </div>
      </div>
      <span class="text-sm text-gray-300 font-mono tracking-wide"
        >{skill.proficiency}%</span
      >
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const skillCards = document.querySelectorAll(".skill-card");
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const index = entry.target.getAttribute("data-index");
            const delay = parseInt(index) * 100;
            setTimeout(() => {
              entry.target.classList.remove("opacity-0", "scale-95");
              entry.target.classList.add("opacity-100", "scale-100");
              // Progress bar animation
              const progressBar = entry.target.querySelector(".skill-progress");
              if (progressBar) {
                const progress = progressBar.getAttribute("data-progress");
                progressBar.style.width = `${progress}%`;
                progressBar.style.transition =
                  "width 1s cubic-bezier(0.4,0,0.2,1)";
              }
            }, delay);
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.2 }
    );
    skillCards.forEach((card) => observer.observe(card));
  });
</script>

<style>
  .skill-card {
    width: 25rem; /* 400px, 25% m√°s ancho que w-80 (320px) */
    max-width: 100%;
    /* margin: 1rem auto; */
  }
  @media (max-width: 640px) {
    .skill-card {
      width: 95vw;
    }
  }
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  @keyframes pulse {
    0%,
    100% {
      opacity: 0.2;
      transform: scale(1);
    }
    50% {
      opacity: 0.3;
      transform: scale(1.1);
    }
  }
  .skill-progress {
    transition-property: width;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 1s;
  }
</style>
